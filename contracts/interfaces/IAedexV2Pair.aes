@compiler >= 6

include "./IAedexV2Callback.aes"
include "./IAEX9Minimal.aes"
include "./IAedexV2FactoryForPair.aes"

// Interface to be used by the router and by the tests for AedexV2Pair implementation
contract interface IAedexV2Pair =
    entrypoint balance: (address) => option(int)

    datatype event
        // AedexV2Pair specific events
        = LockLiquidity(int)
        | PairMint(address /*indexed sender*/, int /*amount0*/, int /*amount1*/)
        | PairBurn(address /*indexed sender*/, address /*indexed to*/, string /*int amount0 | int amount1*/ )
        | SwapTokens(
            address /*indexed sender*/
            , address /*indexed to*/
            , string
            /*
            , int amount0_in,
            , int amount1_in,
            , int amount0_out,
            , int amount1_out,
            */
        )
        //represents the new pair balances of token0 and token1
        | Sync(int /*reserve0*/, int /*reserve1*/)
    entrypoint init : (
          IAedexV2FactoryForPair
        , IAEX9Minimal
        , IAEX9Minimal
        , option(int)
        , option(int)
        ) => void

    entrypoint minimum_liquidity: () => int
    entrypoint factory: () => IAedexV2FactoryForPair
    entrypoint token0: () => IAEX9Minimal
    entrypoint token1: () => IAEX9Minimal

    record reserves = { reserve0: int , reserve1: int, blockTimestampLast: int }
    entrypoint price0_cumulative_last: () => int
    entrypoint price1_cumulative_last: () => int
    entrypoint k_last: () => int

    stateful entrypoint mint: (address) => int
    record amounts = { amount0: int, amount1: int }
    stateful entrypoint burn: (address /*to*/) => amounts

    stateful entrypoint swap: (
        int /*amount0Out*/
        , int /*amount1Out*/
        , address /*to*/
        , option(IAedexV2Callback) /*callback*/
        ) => unit

    stateful entrypoint skim: (address /*to*/) => unit
    stateful entrypoint sync: () => unit

    record reserves = {
              reserve0: int
            , reserve1: int
            , block_timestamp_last: int
            }

    entrypoint get_reserves: () => reserves

    //IEX9
    stateful entrypoint transfer_allowance: ( address /*sender*/, address /*recipient*/, int /*amount*/) => unit

