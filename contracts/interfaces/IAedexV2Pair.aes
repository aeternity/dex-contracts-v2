@compiler >= 6

include "./IAedexV2Callback.aes"
include "./IAEX9Minimal.aes"
include "./IAedexV2FactoryForPair.aes"

contract interface IAedexV2Pair =
    entrypoint domain_separator: () => bytes(32)
    entrypoint nonces: (address /*owner*/) => int
    entrypoint balance: (address) => option(int)

    entrypoint init : (
          IAedexV2FactoryForPair
        , IAEX9Minimal
        , IAEX9Minimal
        , int
        , option(int)
        ) => void

    entrypoint minimum_liquidity: () => int
    entrypoint do_minimum_liquidity: () => int
    entrypoint factory: () => IAedexV2FactoryForPair
    entrypoint token0: () => IAEX9Minimal
    entrypoint token1: () => IAEX9Minimal

    record reserves = { reserve0: int , reserve1: int, blockTimestampLast: int }
    entrypoint getReserves: () => reserves
    entrypoint price0_cumulativeLast: () => int
    entrypoint price1_cumulativeLast: () => int
    entrypoint k_last: () => int

    stateful entrypoint mint: (address) => int
    stateful entrypoint mint2: (address) => int
    record amounts =  { amount0: int,amount1: int }
    stateful entrypoint burn: (address /*to*/) => amounts

    stateful entrypoint swap: (
        int /*amount0Out*/
        , int /*amount1Out*/
        , address /*to*/
        , option(IAedexV2Callback) /*callback*/
        ) => unit

    stateful entrypoint skim: (IAEX9Minimal /*to*/) => unit
    stateful entrypoint sync: () => unit

    record reserves = {
              reserve0: int
            , reserve1: int
            , block_timestamp_last: int
            }

    entrypoint get_reserves: () => reserves

    //IEX9
    stateful entrypoint transfer_allowance: ( address /*sender*/, address /*recipient*/, int /*amount*/) => unit

