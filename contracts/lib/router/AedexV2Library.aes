@compiler >= 6

include "../../interfaces/IAEX9Minimal.aes"
include "../../interfaces/IAedexV2Factory.aes"
include "../../interfaces/IAedexV2Pair.aes"
include "../../lib/Utils.aes"

include "List.aes"
namespace AedexV2Library =

    // returns sorted token addresses, used to handle return values from pairs sorted in this order
    function sort_tokens(
              tokenA: IAEX9Minimal
            , tokenB: IAEX9Minimal
        ): (IAEX9Minimal*IAEX9Minimal) =
        require(tokenA.address != tokenB.address, "AedexV2Library: IDENTICAL_ADDRESSES")
        if(tokenA.address < tokenB.address)
            (tokenA, tokenB)
        else
            (tokenB, tokenA)


    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset
    function quote(amountA: int, reserveA: int, reserveB: int): int /*amountB*/ =
        require(amountA > 0, "AedexV2Library: INSUFFICIENT_AMOUNT")
        require(reserveA > 0 && reserveB > 0, "AedexV2Library: INSUFFICIENT_LIQUIDITY")
        amountA*reserveB / reserveA

    function pair_for(
            factory: IAedexV2Factory
            , tokenA: IAEX9Minimal
            , tokenB: IAEX9Minimal
        ): IAedexV2Pair =
        switch(factory.get_pair(tokenA,tokenB))
            Some(pair) => pair
            None => abort("AedexV2Library: NO_PAIR_FOUND")

    // fetches and sorts the reserves for a pair
    function get_reserves(
            factory: IAedexV2Factory
            , tokenA: IAEX9Minimal
            , tokenB: IAEX9Minimal
        ): (int /*reserveA*/ * int /*reserveB*/) =
        let (token0,_) = sort_tokens(tokenA, tokenB)
        let pair = pair_for(factory,tokenA,tokenB)
        let reserves_ret = pair.get_reserves()
        let (reserve0,reserve1) = (reserves_ret.reserve0,reserves_ret.reserve1)
        if( tokenA == token0)
            (reserve0,reserve1)
        else
            (reserve1,reserve0)

    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset
    function get_amount_out(
              amount_in: int
            , reserve_in: int
            , reserve_out: int
        ): int =
        require(amount_in > 0, "AedexV2Library: INSUFFICIENT_INPUT_AMOUNT")
        require(reserve_in > 0 && reserve_out > 0, "AedexV2Library: INSUFFICIENT_LIQUIDITY")
        let amount_in_with_fee = amount_in*997
        let numerator = amount_in_with_fee*reserve_out
        let denominator = reserve_in*1000 + amount_in_with_fee
        numerator / denominator

    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset
    function get_amount_in(
              amount_out: int
            , reserve_in: int
            , reserve_out: int
        ): int =
        require(amount_out > 0, "AedexV2Library: INSUFFICIENT_OUTPUT_AMOUNT")
        require(reserve_in > 0 && reserve_out > 0, "AedexV2Library: INSUFFICIENT_LIQUIDITY")
        let numerator = reserve_in*amount_out*1000
        let denominator = (reserve_out - amount_out)*997
        (numerator / denominator) + 1


    // performs chained get_amount_out calculations on any number of pairs
    function get_amounts_out(
            factory: IAedexV2Factory
            , amount_in: int
            , path: list(IAEX9Minimal)
        ): list(int) =
        require(List.length(path) >= 2, "AedexV2Library: INVALID_PATH")
        let amounts = amount_in::[]
        _get_amounts_out(factory,amounts,path)

    private function _get_amounts_out(
            factory: IAedexV2Factory
            , amounts: list(int)
            , path: list(IAEX9Minimal)
        ): list(int) = switch((path,amounts))
            (_::[],_) => List.reverse(amounts)
            (tokenA::tokenB::_path,prev_amount::_) =>
                let (reserve_in,reserve_out) = get_reserves(factory,tokenA,tokenB)
                let new_amount = get_amount_out(prev_amount,reserve_in,reserve_out)
                _get_amounts_out(factory,new_amount::amounts,tokenB::_path)
            (_,[]) => abort("AedexV2Library: INTERNAL_ERROR_AMOUNTS_VOID")
            ([],_) => abort("AedexV2Library: INTERNAL_ERROR_PATH_VOID")

    // performs chained get_amount_in calculations on any number of pairs
    function get_amounts_in(
              factory: IAedexV2Factory
            , amount_out: int
            , path: list(IAEX9Minimal)
        ): list(int) =
        require(List.length(path) >= 2, "AedexV2Library: INVALID_PATH")
        let amounts = amount_out::[]
        _get_amounts_in(factory,amounts,List.reverse(path))

    private function _get_amounts_in(
            factory: IAedexV2Factory
            , amounts: list(int)
            , path: list(IAEX9Minimal)
        ): list(int) = switch((path,amounts))
            (_,[]) => abort("AedexV2Library: INTERNAL_ERROR_AMOUNTS_VOID")
            ([],_) => abort("AedexV2Library: INTERNAL_ERROR_PATH_VOID")
            (_::[],_) => amounts
            (tokenB::tokenA::_path,prev_amount::_) =>
                let (reserve_in,reserve_out) = get_reserves(factory,tokenA,tokenB)
                let new_amount = get_amount_in(prev_amount,reserve_in,reserve_out)
                _get_amounts_in(factory,new_amount::amounts,tokenA::_path)

