// ISC License
//
// Copyright (c) 2023, aeternity developers
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
// LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
// OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.

// Under no circumstances, whether in tort (including negligence), contract, or otherwise, 
// unless required by applicable law, shall Aeternity Anstalt be liable for damages,
// including any direct, indirect, special, incidental,
// or consequential damages of any nature arising out of the deployment or use of this smart contract,
// notwithstanding that Aeternity Anstalt may have been advised of the possibility of such damages.

@compiler >= 6

namespace Math =
    function min(x: int, y: int): int =
        if(x < y) x else y

    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)
    function sqrt(y: int): int =
        require(y >= 0, "LP")
        if (y > 3)
            let x = y / 2 + 1
            loop_sqrt_(y, x, y)
        elif (y != 0)
            1
        else
            0

    private function loop_sqrt_(y: int, x: int, z: int) =
        if(x < z)
            let newX = (y / x + x) / 2
            loop_sqrt_(y, newX, x)
        else z
