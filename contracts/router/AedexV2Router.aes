@compiler >= 6

include "../interfaces/router/IWAE.aes"
include "../interfaces/IAedexV2Factory.aes"
include "../interfaces/IAEX9Minimal.aes"
include "../lib/router/AedexV2Library.aes"

contract AedexV2Router =
    record state = {
              factory: IAedexV2Factory
            , weth: IWAE
            }
    type amountA = int
    type amountB = int

    //TODO: add factory and WAE
    entrypoint init( factory: IAedexV2Factory, weth: IWAE) = {
              factory = factory
            , weth = weth
            }

    // **** ADD LIQUIDITY ****

    //just creates the pair if it is the case and calculates the amount
    // based on parameters and pair reserves
    stateful function _addLiquidity(
          tokenA: IAEX9Minimal
        , tokenB: IAEX9Minimal
        , amountADesired: int
        , amountBDesired: int
        , amountAMin: int
        , amountBMin: int
        ): (amountA *  amountB) =
        let factory = state.factory
        // create the pair if it doesn't exist yet
        if( Option.is_none( factory.get_pair(tokenA, tokenB) ))
           factory.create_pair(tokenA,tokenB,None)
           ()
        let (reserveA,reserveB) = AedexV2Library.get_reserves( factory, tokenA, tokenB )

        if (reserveA == 0 && reserveB == 0)
            (amountADesired, amountBDesired)
        else
            let amountBOptimal = AedexV2Library.quote(amountADesired, reserveA, reserveB)
            if (amountBOptimal =< amountBDesired)
                require(amountBOptimal >= amountBMin, "AedexV2Router: INSUFFICIENT_B_AMOUNT")
                (amountADesired, amountBOptimal)
            else
                let amountAOptimal = AedexV2Library.quote(amountBDesired, reserveB, reserveA)
                require(amountAOptimal =< amountADesired, "AedexV2Router: OPTIMAL_GREATER_THEN_DESIRED")
                require(amountAOptimal >= amountAMin, "AedexV2Router: INSUFFICIENT_A_AMOUNT")
                (amountAOptimal, amountBDesired)
